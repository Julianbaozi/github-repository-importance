full_name,mirror_url,archived,disabled,size,stars,watches,forks,owner_type,if_fork,description,homepage,license,files,language,formats,commits,branches,releases,contributors,topics,age,has_issues,open_issues,closed_issues,open_issues_recent,closed_issues_recent,open_prs,closed_prs,open_prs_recent,closed_prs_recent,labels,milestones,recent_contributors,recent_commits,recent_added,recent_deleted,dependent_repositories,dependent_packages,repositories,people,followers,info,readme
lightblueseas/swing-components,,False,False,1532,6,3,2,Organization,False,Several swing components and utilities,,"{'key': 'mit', 'name': 'MIT License', 'spdx_id': 'MIT', 'url': 'https://api.github.com/licenses/mit', 'node_id': 'MDc6TGljZW5zZTEz'}",297,Java,"{'md': 8, 'yml': 2, '': 3, 'xml': 13, 'gradle': 2, 'properties': 2, 'jar': 1, 'bat': 1, 'launch': 13, 'java': 221, 'html': 18, 'config': 1, 'txt': 1, 'form': 4, 'htm': 1, 'css': 1, 'png': 3, 'jpg': 2}",448,28,4,4,0,1679,True,0,0,0,0,0,15,0,0,7,0,1,21,1694,1243,0,0,76,4,,,"# swing-componentsþþ[![Build Status](https://travis-ci.org/lightblueseas/swing-components.svg?branch=master)](https://travis-ci.org/lightblueseas/swing-components)þ[![Maven Central](https://maven-badges.herokuapp.com/maven-central/de.alpharogroup/swing-components/badge.svg)](https://maven-badges.herokuapp.com/maven-central/de.alpharogroup/swing-components)þ[![Javadocs](http://www.javadoc.io/badge/de.alpharogroup/swing-components.svg)](http://www.javadoc.io/doc/de.alpharogroup/swing-components)þ[![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat)](http://opensource.org/licenses/MIT)þ[![Donate](https://img.shields.io/badge/donate-❤-ff2244.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=GVBTWLRAZ7HB8)þþSeveral swing components and utilitiesþþ- Buffered images to pdf fileþþIf you like this project put a ⭐ and donateþþ## LicenseþþThe source code comes under the liberal MIT License, making swing-components great for all types of applications.þþ## Maven dependencyþþMaven dependency is now on sonatype.þCheck out [sonatype repository](https://oss.sonatype.org/index.html#nexus-search;gav~de.alpharogroup~swing-components~~~) for latest snapshots and releases.þþAdd the following maven dependency to your project `pom.xml` if you want to import the core functionality of swing-components:þþThan you can add the dependency to your dependencies:þþ <properties>þ   ...þ  <!-- SWING-COMPONENTS version -->þ  <swing-components.version>5.3</swing-components.version>þ   ...þ </properties>þ   ...þ  <dependencies>þ   ...þ            <!-- SWING-COMPONENTS DEPENDENCY -->þ   <dependency>þ    <groupId>de.alpharogroup</groupId>þ    <artifactId>swing-components</artifactId>þ    <version>${swing-components.version}</version>þ   </dependency>þ   ...þ  </dependencies>þþ## Semantic VersioningþþThe versions of swing-components are maintained with the Semantic Versioning guidelines.þþRelease version numbers will be incremented in the following format:þþ`<major>.<minor>.<patch>`þþFor detailed information on versioning you can visit the [wiki page](https://github.com/lightblueseas/mvn-parent-projects/wiki/Semantic-Versioning).þþ## Want to Help and improve it? ###þþThe source code for swing-components are on GitHub. Please feel free to fork and send pull requests!þþCreate your own fork of [lightblueseas/swing-components/fork](https://github.com/lightblueseas/swing-components/fork)þþTo share your changes, [submit a pull request](https://github.com/lightblueseas/swing-components/pull/new/develop).þþDon't forget to add new units tests on your changes.þþ## Contacting the DevelopersþþDo not hesitate to contact the swing-components developers with your questions, concerns, comments, bug reports, or feature requests.þ- Feature requests, questions and bug reports can be reported at the [issues page](https://github.com/lightblueseas/swing-components/issues).þþ## NoteþþNo animals were harmed in the making of this library.þþ# DonationsþþIf you like this library, please consider a donation through paypal: <a href=""https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=B37J9DZF6G9ZC"" target=""_blank"">þ<img src=""https://www.paypalobjects.com/en_US/GB/i/btn/btn_donateCC_LG.gif"" alt=""PayPal this"" title=""PayPal – The safer, easier way to pay online!"" border=""0"" />þ</a>þþor over bitcoin or bitcoin-cash with:þþ36JxRRDfRazLNqUV6NsywCw1q7TK38ukpCþþor over ether with:þþ0x588Aa02De98B1Ef70afeDC3ec5290130a3E5e273þþor over flattr: þ<a href=""https://flattr.com/submit/auto?fid=r7vp62&url=https%3A%2F%2Fgithub.com%2Flightblueseas%2Fswing-components"" target=""_blank"">þ<img src=""http://api.flattr.com/button/flattr-badge-large.png"" alt=""Flattr this"" title=""Flattr this"" border=""0"" />þ</a>þþ## Similar projectsþþHere is a list of awesome swing projects:þþOpen Source:þþ * [Java Generic Swing Application Framework](https://github.com/pgdurand/jGAF) Generic Swing Application Framework (jGAF) is a library designed to facilitate the creation of cross-platorm graphical applications for the Oracle Java Platform.þ * [OpenSwing](http://oswing.sourceforge.net/) OpenSwing is an open-source suite of advanced graphics components based on Swing toolkitþ * [JCalendar](https://toedter.com/jcalendar/) JCalendar is a Java date chooser bean for graphically picking a date.þ * [FlexDock](https://github.com/opencollab/flexdock) FlexDock is a Java docking framework for use in cross-platform Swing applicationsþ * [oxbow](https://github.com/eugener/oxbow) Swing UI Enhacementsþ * [Darcula](https://github.com/bulenkov/Darcula) Darcula Look and Feelþ * [Spring Rich Client](https://sourceforge.net/projects/spring-rich-c/files/spring-rich-c/)(not maintainend anymore) The Spring Rich Client Project (RCP) is a sub-project of The Spring Framework.þ * [utils4swing](http://www.fuin.org/utils4swing/index.html) A small Java 1.4 compatible library that aims to ease the pain of some Swing development tasksþ * [utils4swing5](http://www.fuin.org/utils4swing5/index.html) A small Java 1.6 library that aims to ease the pain of some Swing development tasks. þ * [RSyntaxTextArea](https://github.com/bobbylight/RSyntaxTextArea) A syntax highlighting, code folding text editor for Java Swing applications.þþCommercialþþ * [JIDE](http://www.jidesoft.com/) JIDE Software is a professional Java UI component provider.þ * [Swing Depot: Components Suites](http://www.javadesktop.org/rollups/components/) commercial swing componentsþ þ## Creditsþþ|**Travis CI**|þ|     :---:      |þ|[![Travis CI](https://travis-ci.com/images/logos/TravisCI-Full-Color.png)](https://coveralls.io/github/lightblueseas/swing-components?branch=master)|þ|Special thanks to [Travis CI](https://travis-ci.org) for providing a free continuous integration service for open source projects|þ|     <img width=1000/>     |þþ|**Nexus Sonatype repositories**|þ|     :---:      |þ|[![sonatype repository](https://img.shields.io/nexus/r/https/oss.sonatype.org/de.alpharogroup/swing-components.svg?style=for-the-badge)](https://oss.sonatype.org/index.html#nexus-search;gav~de.alpharogroup~swing-components~~~)|þ|Special thanks to [sonatype repository](https://www.sonatype.com) for providing a free maven repository service for open source projects|þ|     <img width=1000/>     |þþ|**javadoc.io**|þ|     :---:      |þ|[![Javadocs](http://www.javadoc.io/badge/de.alpharogroup/swing-components.svg)](http://www.javadoc.io/doc/de.alpharogroup/swing-components)|þ|Special thanks to [javadoc.io](http://www.javadoc.io) for providing a free javadoc documentation for open source projects|þ|     <img width=1000/>     |"
droiddeveloper1/android-wear-gestures-recognition,,False,False,14903,7,2,3,User,False,"Android Wear Gesture Recognizer. This combined Android Wear/Android Mobile application attempts to recognize some basic gestures/motions from a wearable.  Several gestures are predefined(circle, line, vee, triangle, square) and their motion coefficients precomputed.",,"{'key': 'apache-2.0', 'name': 'Apache License 2.0', 'spdx_id': 'Apache-2.0', 'url': 'https://api.github.com/licenses/apache-2.0', 'node_id': 'MDc6TGljZW5zZTI='}",1639,Java,"{'properties': 5, 'lock': 2, 'bin': 10, 'name': 1, 'xml': 414, 'iml': 3, '': 3, 'md': 1, 'gradle': 4, 'jar': 21, 'bat': 1, 'java': 21, 'class': 135, 'dex': 1, 'aidl': 2, 'txt': 9, 'png': 990, '87/res/raw/gtm_analytics': 1, 'store': 4, 'mp3': 2, 'ap_': 4, 'apk': 2, 'pro': 2, 'zip': 1}",7,1,0,1,0,1871,True,1,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,,,0,,"# android-wear-gestures-recognitionþAndroid Wear Gesture Recognizer.þ================================þThis combined Android Wear/Android Mobile application attempts to recognize some basic gestures/motions from a wearable.  þSeveral gestures are predefined(circle, line, vee, triangle, square) and their motion coefficients precomputed.þþSummary:þ--------þGesture recognition by analysis of wearable's motion patternþþIntroduction:þ------------þThis combined Android Wear/Android Mobile application attempts to recognize some basic gestures/motions from a wearable by analyzing the associated Elliptic Fourier Descriptors(EFD).þþSeveral gestures are predefined(circle, line, vee, triangle, square) and their motion coefficients pre-computed. These pre-computed gestures are applied in the classification stage of the analysis. þThe app behaves in two modes: (1)it analyzes the wearable's motion/gesture, (2) it writes a file to externalstorage that contains the results of each motion analysis (i.e. a set of 8 EFD harmonics). þþDetails:þ--------þThe Android Wear component collects triple-axis accelerometer information and sends it (via Bluetooth MessageApi) to the paired Android phone/mobile device. The Android mobile app then applies PCA(Principal Components Analysis) to reduce the dimensionality of the received 3D data to 2D for further analysis. I used a PCA algorithm based on SVD(Singular Value Decomposition), as opposed to the EVD(Eigenvalue Decomposition) alternative, because although EVD may be computationally faster, it is not guaranteed to be numerically stable. Elliptic Fourier Descriptors(EFD) of the 2D data are then computed (just the first 8 harmonics,) and compared to the set of pre-computed descriptors. EFD was chosen over other competing techniques (Hidden Markov Models, Dynamic Time Warping, Recurrent Neural Networks, etc.) due to the availability of an efficient mobile library, its speed of computation, and its rotation-, scale- and translation-invariance properties. þFor those interested, the following sites contain more information about EFDs: þhttp://demonstrations.wolfram.com/FourierDescriptors/ þhttps://www.youtube.com/watch?v=jMI8a9Jg8N0 þhttp://knight.temple.edu/~lakamper/courses/cis9601_2009/etc/fourierShape.pdf þhttp://research.cs.tamu.edu/prism/lectures/pr/pr_l29.pdf þThe PCA, SVD and matrix computations are done using Efficient Java Matrix Library(EJML / http://code.google.com/p/efficient-java-matrix-library/).þþThe 3D scatterplots are rendered using a proprietary closed source OpenGL-based graphics package called OrsonCharts (http://www.object-refinery.com/orsoncharts/), so libraries for that are not included in the source code. You will have to purchase a copy of the 3D graphics platform for yourself in order to display the 3D scatter plots of the accelerometer data and unlock the visualization capabilities of the project.þþIn summary, the gesture recognition algorithm comprises of several components: þ1. collect 3D acceleration data from the wearable þ2. re-dimension the 3D data to planar 2D via PCA (Principal Components Analysis) by projecting the 3D vectors onto a 2D plane-of-best-fit þ3. calculate the Fourier co-efficients(i.e. Elliptic Fourier Descriptors) of the 2D motion vectors þ4. compute a ""distance"" metric between the measured vectors and a set of pre-computed vectors þ5. sort the list of distance measures in ascending order, and pick the top one as the best match. þþThe EFD class was obtained from Katja Schulze's PlantoVision project (https://github.com/KatjaSchulze/PlanktoVision/tree/master/src/calc).þþThe app was tested using the following combination of hardware: þ- Motorola Droid Turbo ('KitKat' 4.4.4) þ- Motorola ""Moto 360"" smart watchþþUsage:þAndroid Wear bluetooth debugging instructions can be found here:- https://developer.android.com/training/wearables/apps/bt-debugging.htmlþþAfter pairing the Android wearable with the mobile device, install both components of the app. On the wearable UI, click the ""Send2Phone"" button to start capturing accelerometer data. Default capture window is 1500ms. The wearable UI will turn from black to red while motion data is being captured, then back to black again after data capture has completed.þþTo obtain optimum classification results, start moving the wearable through the gesture as you tap on ""Send2Phone"". Do not tap on the button then wait to start the gesture as accelerometer zero-point ""noise"" will be captured as part of the valid data set; this will pollute the generated data and lead to misclassifications.þþOn the mobile device, click the ""3D-2D toggle"" button to switch the scatter plot display between the full raw 3D vectors and the ""flattened"" 2D vectors in 3D accelerometer space. þUse your finger(s) to manipulate, scale, and rotate the scatter plot in order to view the data from different perspectives.þþClick on the ""Elliptic Fourier Descriptor"" button to compute the EFD harmonics (just the lowest 8 harmonics) and to obtain a classification decision. The classification decision will appear as a Toast on the screen. By default, the EFD data will also be written out to a file in external storage on the mobile device (default location: /GESTURES/ folder under external storage root folder). þThis is a text file containing sets of EFD harmonics(4-tuples) that can be directly appended to the existing training set in the app.þþImprovements:þ-------------þIn order to obtain more accurate classification results, you can run the app to generate more sets of descriptors for a particular motion gesture and simply append the corresponding nested lists of descriptors (4-tuple doubles values) to the corresponding data structure defined in com.dmt.gestureproject_1.Constants.java . þþI chose to compute only the first 8 EFD harmonics for each gesture. Perhaps increasing or decreasing the number of computed harmonics may lead to an improvement in the classification accuracy."

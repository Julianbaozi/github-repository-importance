full_name,mirror_url,archived,disabled,if_fork,size,files,stars,watches,forks,recent_commits,recent_added,recent_deleted,recent_contributors,latest_commits,owner_type,description,formats,homepage,license,language,commits,branches,releases,contributors,topics,age,has_issues,open_issues,closed_issues,open_issues_recent,closed_issues_recent,open_prs,closed_prs,open_prs_recent,closed_prs_recent,labels,milestones,dependent_repositories,dependent_packages,repositories,people,followers,readme,info
pentaho/pentaho-platform,,False,False,False,167375,5754,410,136,664,27,3731,1702,10,"[0, 3, 6, 10, 14, 20, 24, 29, 30, 35]",Organization,Pentaho BA Server Core,"{'': 17, 'txt': 20, 'md': 2, 'xml': 576, 'java': 2416, 'bat': 9, 'sh': 10, 'csv': 4, 'properties': 651, 'script': 13, 'sql': 19, 'png': 630, 'xmi': 7, 'cda': 1, 'cdfde': 1, 'wcdf': 1, 'locale': 39, 'css': 33, 'svg': 32, 'js': 132, 'xcdf': 4, 'html': 141, 'xaction': 538, 'ktr': 5, 'prpt': 11, 'xanalyzer': 6, 'prpti': 1, 'tld': 2, 'gif': 64, 'jsp': 12, 'template': 2, 'jpg': 20, 'xsl': 218, 'dtd': 8, 'xsd': 11, 'xul': 4, 'tmp': 1, 'ico': 2, 'eot': 4, 'ttf': 14, 'woff': 4, 'swf': 1, 'idatabasedialectprovider': 1, 'handlers': 2, 'schemas': 2, 'driver': 2, 'jmx': 4, 'zip': 7, 'xjb': 1, 'json': 5, 'yaml': 3, 'jar': 7, 'class': 2, 'test10type1-ext': 1, 'url': 14, 'db': 4, 'rptdesign': 6, 'kjb': 1, 'jasper': 2, 'jrxml': 2, 'ldif': 1, 'providers': 1}",http://www.pentaho.com,"{'key': 'other', 'name': 'Other', 'spdx_id': 'NOASSERTION', 'url': None, 'node_id': 'MDc6TGljZW5zZTA='}",Java,8338,71,184,147,0,3221,True,18,16,2,0,8,4672,5,90,7,0,0,0,95,8,,"pentaho-platformþ================þþOverviewþ--------þþThis set of modules make up Pentaho's core platform and business analytics server.þþ## apiþThis module contains common interfaces used by the platform.  APIs for the plugin system, repository, security, and many others exist here.þþ## coreþThis module contains core implementations of platform sub-systems and utility classes.þþ## repositoryþThis module contains the JCR Jackrabbit repository implementation of the pentaho platformþþ## schedulerþThis module contains the Quartz based scheduler implementation of the pentaho platformþþ## extensionsþThis module contains a variety of capabilities used for various purposes within the platformþþ## user-consoleþThis module is a GWT front end for the pentaho platform, allowing users to navigate the repository, execute and schedule content, as well as administer the platformþþ## assembliesþThis module creates the Pentaho Server archive and contains the samples and other content needed for the Pentaho Server.þþþHow to buildþ--------------þþPentaho platform uses the maven framework. þþþ#### Pre-requisites for building the project:þ* Maven, version 3+þ* Java JDK 1.8þ* This [settings.xml](https://raw.githubusercontent.com/pentaho/maven-parent-poms/master/maven-support-files/settings.xml) in your <user-home>/.m2 directoryþþ#### Building itþþThis is a maven project, and to build it use the following commandþþ```þmvn clean installþ```þþOptionally you can specify -Dmaven.test.skip=true to skip the tests (even thoughþyou shouldn't as you know)þþThe build result will be a Pentaho package located in *assemblies/pentaho-server/*. Then, this package can be dropped inside your system folder.þþ#### Running the testsþþ__Unit tests__þþThis will run all unit tests in the project (and sub-modules). To run integration tests as well, see Integration Tests below.þþ```þ$ mvn testþ```þþIf you want to remote debug a single java unit test (default port is 5005):þþ```þ$ cd coreþ$ mvn test -Dtest=<<YourTest>> -Dmaven.surefire.debugþ```þþ__Integration tests__þþIn addition to the unit tests, there are integration tests that test cross-module operation. This will run the integration tests.þþ```þ$ mvn verify -DrunITsþ```þþTo run a single integration test:þþ```þ$ mvn verify -DrunITs -Dit.test=<<YourIT>>þ```þþTo run a single integration test in debug mode (for remote debugging in an IDE) on the default port of 5005:þþ```þ$ mvn verify -DrunITs -Dit.test=<<YourIT>> -Dmaven.failsafe.debugþ```þþTo skip testþþ```þ$ mvn clean install -DskipTestsþ```þþTo get log as text fileþþ```þ$ mvn clean install test >log.txtþ```þþþ__IntelliJ__þþ* Don't use IntelliJ's built-in maven. Make it use the same one you use from the commandline.þ  * Project Preferences -> Build, Execution, Deployment -> Build Tools -> Maven ==> Maven home directoryþþ````þFor issue tracking and bug report please useþ[Jira](http://jira.pentaho.com/browse/biserver). Its master branch is built upon commitþmerges in [Jenkins Continuous Integration](http://ci.pentaho.com/job/BISERVER-CE/)",
MoKee/android_frameworks_base,,False,False,False,3099478,30725,31,11,52,10,12168,2195,1,"[11, 66, 72, 79, 83, 84, 85, 91, 100, 102]",Organization,,"{'': 278, 'bp': 64, 'mk': 427, 'cfg': 1, 'xml': 9595, 'cpp': 976, 'ttf': 24, 'ttx': 14, 'java': 9121, 'aidl': 1086, 'txt': 103, 'proto': 123, 'h': 616, 'md': 15, 'rc': 4, 'gz': 1, 'c': 12, 'png': 6764, 'sh': 33, 'html': 299, 'logtags': 14, 'sed': 1, 'frag': 1, 'vert': 1, 'csv': 1, 'ogg': 513, 'dex': 1, 'dat': 2, 'gld': 2, 'pk8': 4, 'pem': 11, 'jpg': 50, 'obb': 10, 'py': 26, 'idc': 3, 'kl': 52, 'kcm': 45, 'wav': 130, 'aif': 3, 'mid': 3, 'mp4': 39, 'ai': 59, 'zip': 52, 'graffle': 1, 'pdf': 1, 'css': 2, 'properties': 8, 'apk': 24, 'in': 2, 'graph': 1, 'mp3': 14, 'dng': 2, 'amr': 1, '3gp': 26, 'webm': 1, 'gif': 1, 'kt': 10, 'proguard': 3, 'flags': 10, 'json': 1, 'svg': 1, 'android': 2, 'emd': 2, 'rs': 1, 'gradle': 5, 'ab': 2, 'der': 1, 'pro': 1, 'jar': 2, 'bat': 1, 'bin': 5, 'pcap': 1, 'jpeg': 1, 'xsd': 1, 'compiled': 3, 'iml': 1, 'ipr': 1, 'js': 1, 'base64': 5, 'conf': 1}",,"{'key': 'other', 'name': 'Other', 'spdx_id': 'NOASSERTION', 'url': None, 'node_id': 'MDc6TGljZW5zZTA='}",Java,371716,14,0,869,0,4286,True,4,1,0,0,12,8,1,0,6,0,0,0,1,26,,,
PCGen/pcgen,,False,False,False,313761,13584,308,52,269,82,13241,8701,11,"[2, 3, 4, 10, 15, 17, 21, 23, 24, 27]",Organization,Main code and data development for pcgen program release,"{'': 9, 'md': 16, 'yml': 4, 'xml': 92, 'gradle': 6, 'pcg': 48, 'iml': 2, 'ipr': 1, 'groovy': 2, 'template': 1, 'ini': 2, 'html': 494, 'bat': 5, 'sh': 1, 'exe': 1, 'png': 664, 'ico': 8, 'java': 4069, 'mf': 3, 'fxml': 22, 'css': 19, 'gif': 97, 'jpg': 296, 'db': 1, 'properties': 15, 'xsl': 34, 'importorder': 1, 'ftl': 73, 'pcp': 1, 'htm': 87, 'pdf': 5, 'txt': 581, 'pcc': 612, 'lst': 5884, 'jpeg': 41, 'nam': 48, 'bmp': 2, 'py': 1, 'js': 2, 'jar': 1, 'icns': 1, 'pl': 1, 'nsh': 1, 'nsi': 1, 'xslt': 296, 'fo': 4, 'rpgame': 3, 'rpgrp': 15, 'ttf': 4, 'xconf': 1, 'dtd': 5, 'vm': 1}",http://pcgen.org,"{'key': 'lgpl-2.1', 'name': 'GNU Lesser General Public License v2.1', 'spdx_id': 'LGPL-2.1', 'url': 'https://api.github.com/licenses/lgpl-2.1', 'node_id': 'MDc6TGljZW5zZTEx'}",Java,26534,15,47,47,3,5254,True,3,148,3,3,4,6160,4,129,9,0,0,0,19,2,,"![PCGenShot](https://user-images.githubusercontent.com/470400/67638917-5f6e8a80-f8c0-11e9-972b-7adf4c9126e7.png)þþPCGen is a program designed to create and manage player characters in pen & paper games like D&D.þIt works on Windows, Mac & Linux, basically anywhere the Java JDK works.þIt will let you create a character under a system of rules, track its levels and abilities as you progress, inventory and spells.þIt supports numerous game systems, most notably:þþ- D&D 3.5, 4.0, 5.0þ- Pathfinder 1eþ- Starfinderþþ# Table of Contentsþ1. [PCGen Needs You](#pcgen-needs-you)þþ1. [The Old Wiki](#the-old-wiki)þþ1. [PCGen LST Tutorial](#pcgen-lst-tutorial)þþ1. [Basic Workflow](#basic-workflow)þþ1. [Development Setup](#development-setup)þþ1. [Essential Gradle Tasks](#essential-gradle-tasks)þþ# PCGen Needs YouþþPCGen is an open source program driven by cotributors, without your help no new fixes or content can be added.þIf you can program Java or want to contribute to expanding the book support please consider joining our team.þMany of the original members have become inactive and we need new contributors to keep the project going.þþTo join our group:þ- Join our [Discord](https://discord.gg/M7GH5BS)þ- Post in the volunteers channel to get access to the [Slack](https://slack.com). A senior member will add you by email.þ- Make an account on the [JIRA] bug tracker. See [CODE] and [DATA] issues. Work is tracked here to easily generate release notes.þ- Review the [Basic Workflow](#basic-workflow) & [Development Setup](#development-setup) below to get started.þþ# The Old WikiþThe [old wiki](http://159.203.101.162/w/index.php) archives historical meetings, many design documents and useful dev information.þBrowse it when you have time, it can provide some insight into certain parts of the architecture.þþ# PCGen LST TutorialþAndrew has made a series of videos [explaining the LST files](https://www.youtube.com/watch?v=LhGkqdXNtOw&list=PLLa5A1qjBOPekqEC_R9BAZW-8q5IT-klM).þThese are mainly targetted at new DATA contributors adding new books/content and fixing bugs.þYou can of course ask questions in the discord or slack if you are unsure.þProgrammers may want to review these if they work on the LST parsing or related systems.þþ# Basic Workflowþþ1. Get a bug from [JIRA] primarily from the [CODE] or [DATA] sections. Alternatively if you want to propose a new feature/change, make a JIRA entry to track it.þ1. Create a branch in your fork of [PCGen] during development. It is good to name branches after ticket numbers, like fix_code_3444 or fix_data_3322.þ1. Work until the feature or bug is finished. Add tests if needed, especially if new code added.þ1. Push all work up into your copy of [PCGen]. Try to ensure build passes BEFORE submitting a pull request.þ1. Submit pull request from your fork to master and respond to review by members.þ1. Go back to first step.þþ# Development SetupþþThese steps will guide you to a basic setup for development.þThese steps should work for Linux, Mac or Windows. Where steps differ it will be highlighted.þIf you have trouble, feel free to ask in the discord or slack once you have joined.þþ### Running CommandsþAnything `written like this` should be executed in a terminal.þFor Windows this means opening the start menu and typing cmd.exe or Powershell. The latter is more modern if available.þFor Linux or Mac, whatever default terminal you have is fine.þþ### Install JavaþCheck the installed version with:þþ    java -versionþþYou will want Java with a minimum version of 11.þYou can install the latest version from [AdoptOpenJDK](https://adoptopenjdk.net) regardless of your OS, please see instructions there.þþ### Install GitþCheck the installed version with:þþ    git --versionþþAny version should do.þYou can install git on debian machines:þþ    sudo apt-get install gitþþOn Windows, [Git For Windows](https://gitforwindows.org) is a good choice. Download and install.þBe sure to install both the GUI & command line version. The default options are fine.þþIf you do not know about git, reading the first 3 or 4 chapters of [Pro Git](https://git-scm.com/book/en/v2)þwill go a long way. It is designed about command line but all principles apply to the GUI version.þþ### Fork and Clone PCGenþLog in to github and go to [PCGen] in your browser.þFork the project to have your own copy.þClone the fork locally, if you use ssh for instance it should be:þþ    git clone git@github.com:USERNAME/pcgen.gitþþWhere USERNAME is your github username.þThis can be done on the command line, or else open the git GUI and clone from there.þþ### Stay Up To DateþOpen a terminal inside the cloned pcgen project.þRun the following command:þþ    git remote add upstream https://github.com/PCGen/pcgenþþThis sets up the project for upstream rebasing, to keep you level with changes.þYou can rebase the master with latest changes with the following. It can be done from GUI as well.þþ    git checkout master && git fetch upstream && git rebase masterþþ### Get an IDEþThis step is optional. You are free to program in what you prefer, these are several popular IDEs for Java.þIf you are new we would suggest IntelliJ. Follow download/setup instructions then continue.þThese IDEs have git and gradle plugins either out of box or that can be installed.þ- [IntelliJ Community](https://www.jetbrains.com/idea)þ- [Eclipse](https://www.eclipse.org)þ- [Netbeans](https://netbeans.org)þþOnce setup, open your IDE of choice. You should be able to import the cloned fork.þImport the [PCGen] fork as a gradle project. From this point, you can work on the project.þFor IntelliJ Community do: File > New > Project from Existing Sources ...þAll of these IDEs have git and gradle plugins that can be used instead of commands.þþ# Essential Gradle TasksþþThis is a __quick__ rundown on gradle. You can get more information from [gradle docs](https://gradle.org/guides).þGradle is like make, it allows you to run commands to build projects.þThe tasks can depend on one another and will ensure all dependencies are met before running.þThese commands will be the same if you use a GUI to execute them.þþNote: `./gradlew` indicates you are executing the gradle wrapper command binary that comes with PCGen's source tree.þThis will automatically download and use the latest version of gradle. If you have gralde installed, you justþsubstitute `./gradlew` for `gradle` on the command line.þþ### See All Available Commandsþ    ./gradlew tasksþþ### Just (Re)Compile Javaþ    ./gradlew compileJavaþþ### Build All Required Filesþ    ./gradlew assembleþþ### Run PCGenþ    ./gradlew runþþ### Run Test Suiteþ    ./gradlew testþþ### Run Full Test SuiteþDo this primarily __before__ pull requests.þThis is almost exactly the command Travis runs to verify, if it fails locally you will fail the build and your PR will not be merged.þþ    ./gradlew clean build copyToOutput test compileSlowtest datatest pfinttest allReports buildDistþþ### Clean All Build Filesþ    ./gradlew cleanþþ[PCGen]: https://github.com/PCGen/pcgenþ[JIRA]: https://pcgenorg.atlassian.netþ[CODE]: https://pcgenorg.atlassian.net/projects/CODE/issuesþ[DATA]: https://pcgenorg.atlassian.net/projects/DATA/issues",
eclipse/ceylon,,False,False,False,178250,13362,366,44,65,1,1,1,1,"[52, 80, 421, 521, 524, 525, 653]",Organization,"The Ceylon compiler, language module, and command line tools","{'': 174, 'eclipse': 1, 'md': 36, 'xml': 582, 'gradle': 38, 'yml': 1, 'sh': 73, 'properties': 76, 'java': 5030, 'groovy': 16, 'plugin': 29, 'bat': 4, 'argumentparserfactory': 1, 'tool': 5, 'utf8properties': 4, 'txt': 57, 'css': 7, 'js': 858, 'png': 4, 'workaround': 1, 'maven': 1, 'repositorybuilder': 1, 'repositories': 9, 'pom': 9, 'sha1': 82, 'jar': 60, 'ceylon': 3831, 'car': 29, 'src': 1645, 'json': 5, 'config': 16, 'launch': 2, 'tests': 1, 'ent': 23, 'h': 6, 'root': 2, 'sh-template': 1, 'html': 28, 'properties-template': 1, 'javacompilertool': 1, 'flg': 1, 'annotationprocessorfactory': 1, 'out': 370, 'class': 16, 'jasm': 2, 'errlog': 6, 'back': 1, 'jcod': 1, 'other': 1, 'jtx': 1, '1': 1, '2': 1, '3': 1, 'win': 1, 'ico': 1, 'mf': 4, 'trace': 6, 'gjs': 14, 'bash': 1, 'prefs': 6, 'xsl': 126, 'adoc': 1, 'ceylon_': 2, 'jdk7': 2, 'jdk8': 2, 'jdk9': 2, 'idx': 10, 'index': 9, 'nodes': 1, 'g': 6, 'dtd': 5, 'mod': 6, 'cat': 1, 'xweb': 3}",http://ceylon-lang.org,"{'key': 'other', 'name': 'Other', 'spdx_id': 'NOASSERTION', 'url': None, 'node_id': 'MDc6TGljZW5zZTA='}",Java,307,177,106,34,0,952,True,1019,6308,4,1,5,130,0,1,55,4,0,0,671,140,,"# CeylonþþThis is the 1.3.4-SNAPSHOT _""You'll Thank Me Later""_ release of the Ceylon þcommand line tools. This is a production version of the platform.þþCeylon is a modern, modular, statically typed programming language þfor the Java and JavaScript virtual machines. The language features þa flexible and very readable syntax, a unique and uncommonly elegant þstatic type system, a powerful module architecture, and excellent þtooling, including an awesome Eclipse-based IDE.þþCeylon enables the development of cross-platform modules which þexecute portably in both virtual machine environments. Alternatively, þa Ceylon module may target one or the other platform, in which case þit may interoperate with native code written for that platform.þþRead more about Ceylon at <http://ceylon-lang.org>.þþ## Distribution layoutþþ- `cmr`                 - *Ceylon Module Resolver* moduleþ- `common`              - Common code moduleþ- `compiler-java`       - JVM compiler moduleþ- `compiler-js`         - JS compiler moduleþ- `dist`                - Build files þ- `language`            - Ceylon language moduleþ- `model`               - Type model moduleþ- `runtime`             - Runtime moduleþ- `typechecker`         - Typechecker moduleþ- `langtools-classfile` - Java tools classfile module forkþ- `tool-provider`       - Ceylon tool provider moduleþ- `LICENSE-ASL`         - The Ceylon ASL licenseþ- `LICENSE-GPL-CP`      - The Ceylon GPL/CP licenseþ- `LICENSE-LGPL`        - The Ceylon LGPL licenseþ- `README.md`           - This fileþþ## Building the distributionþþGo to the `dist` folder and follow the instructions in the [`BUILD.md`](/dist/BUILD.md) file.þþ## Source codeþþSource code is available from GitHub:þþ<http://github.com/ceylon>þþ## IssuesþþBugs and suggestions may be reported in GitHub's issue tracker.þþ<http://github.com/ceylon/ceylon/issues>þþ## Systems where Ceylon is known to workþþSince Ceylon is running on the JVM it should work on every platform þthat supports a Java 7 or 8 compatible JVM. However we have tested the þfollowing platforms to make sure it works:þþ### Linuxþþ- Ubuntu ""wily"" 15.10 (64 bit) JDK 1.7.0_95 (IcedTea) Node 0.10.25þ- Fedora 23 (64 bit), JDK 1.8.0_77 (OpenJDK)þ- Fedora 22 (64 bit), JDK 1.8.0_72 (OpenJDK)þ- Fedora 22 (64 bit), JDK 1.7.0_71 (Oracle)þþ### Windowsþþ- Windows 10 Home (64 bit) 1.8.0_77þ- Windows 7 (64 bit) 1.7.0_05 (Oracle)þ- Windows Server 2008 R2 SP1 JDK 1.7.0_04þþ### OSXþþ- OSX 10 Lion (10.8.5) JDK 1.7.0_40 (Oracle) Node 0.10.17þ- OSX 11 El Capitan (10.11.6) JDK 1.7.0_80 (Oracle) Node 0.10.35þþ## LicenseþþThe Ceylon distribution is and contains work releasedþþ- partly under the ASL v2.0 as provided in the `LICENSE-ASL` file þ  that accompanied this code, andþ- partly under the GPL v2 + Classpath Exception as provided in the þ  `LICENSE-GPL-CP` file that accompanied this code.þþ### License terms for 3rd Party WorksþþThis software uses a number of other works, the license terms of þwhich are documented in the `NOTICE` file that accompanied this code.þþ### RepositoryþþThe content of this code repository, [available here on GitHub][ceylon], þis released under the ASL v2.0 as provided in the `LICENSE-ASL` file þthat accompanied this code.þþ[ceylon]: https://github.com/ceylon/ceylonþþBy submitting a ""pull request"" or otherwise contributing to this þrepository, you agree to license your contribution under the license þmentioned above.þþ## AcknowledgementþþWe're deeply indebted to the community volunteers who contributed a þsubstantial part of the current Ceylon codebase, working often in þtheir own spare time.þþCeylon is a project of the [Eclipse Foundation](http://eclipse.org).",
yellowant/ssltest,,False,False,False,6629,33139,4,4,8,0,0,0,0,"[601, 1101, 1103, 1106, 1125, 1140, 1181, 1201, 1338, 1344]",Organization,,"{'': 6, 'prefs': 3, 'xml': 1, 'dh': 109, 'java': 42, 'htm': 3, 'css': 5, 'eot': 1, 'svg': 1, 'ttf': 1, 'woff': 1, 'js': 5, 'crt': 32960, 'sh': 1}",,"{'key': 'other', 'name': 'Other', 'spdx_id': 'NOASSERTION', 'url': None, 'node_id': 'MDc6TGljZW5zZTA='}",Java,375,1,0,4,0,2116,True,16,1,0,0,0,0,0,0,7,0,0,0,15,2,,,
weimingtom/toolib,,False,False,False,93133,8161,0,0,0,0,0,0,0,"[3300, 3304, 3321, 3324, 3325, 3326, 3327, 3328, 3329, 3331]",User,Automatically exported from code.google.com/p/toolib,"{'java': 2923, 'aidl': 160, 'html': 1294, 'logtags': 2, 'txt': 10, 'properties': 10, 'src': 3, 'mk': 1, 'xml': 612, '': 4, 'png': 2747, 'raw': 2, 'jpg': 5, 'ogg': 1, 'yaml': 1, 'jd': 345, 'ico': 1, 'cs': 3, 'zip': 8, 'gif': 7, 'psd': 7, 'js': 1, 'css': 8, 'pdf': 3, 'prefs': 3}",,,Java,81,3,0,1,0,3496,True,0,1,0,0,0,0,0,0,10,0,0,0,,,210,,
kageiit/perf-android-large,,False,False,False,7686,57852,0,0,0,0,0,0,0,"[1388, 1389, 1417, 1421, 1422, 1443, 1455]",User,,"{'': 41, 'md': 71, 'gradle': 50, 'xml': 16822, 'sql': 175, 'json': 1365, 'html': 105, 'java': 18830, 'py': 105, 'py-example': 35, 'txt': 35, 'sh': 35, 'svg': 35, 'properties': 37, 'ttf': 140, 'otf': 35, 'css': 70, 'png': 19862, 'groovy': 1, 'jar': 1, 'bat': 1, 'aar': 1}",,,Java,12,2,0,3,0,1455,False,,,,,0,0,0,0,7,0,0,0,,,222,# android-studio-gradle-testþA test project with a structure to stress test and find out issues in Android Studio and Gradleþþ## PrerequisitesþInstall (via android sdk tool):þ- Version 24 of android sdk platform/build toolsþ- android support libraryþ- google play _everything_þ- google repositoryþþ## Get a Gradle nightly buildþFollow the instructions at https://gradle.org/gradle-nightly-build/ to update the wrapper to a current nightly build of Gradle.,
njb5081/csci_320_project,,False,False,False,10607,1551,0,3,0,0,0,0,0,"[819, 820, 824, 825, 826, 827, 828, 834, 844]",User,,"{'': 1, 'xml': 14, 'md': 1, 'iml': 1, 'csv': 16, 'jar': 3, 'bat': 12, 'sh': 4, 'pdf': 1, 'html': 244, 'png': 84, 'gif': 42, 'js': 9, 'css': 8, 'txt': 21, 'conf': 1, 'dll': 1, 'exe': 1, 'svg': 5, 'ico': 3, 'properties': 3, 'prop': 32, 'prefs': 4, 'nsi': 1, 'mf': 3, 'driver': 1, 'java': 1005, 'sql': 7, 'jsp': 15, 'processor': 1, 'class': 7}",,,Java,45,1,0,2,0,851,True,0,0,0,0,0,0,0,0,8,0,0,0,,,0,"# CSCI.320.02 Database Project - Automobile Domainþ## Created by: Tyson Sisco, Jake Dulin, Nicholas Baxter, Chris Baudouinþþ### Building the Applicationþ* Open the terminal and navigate to the root of this projectþ* Launch the application via `java -jar out/artifacts/automobile_project_jar/automobile_project.jar`þþ### Using the Applicationþ* The flow of the application is simple. The system will first prompt the user for his or her role (database administrator, dealership, or customer). Press the number corresponding to your role in the system.þ* The system will then prompt you for which action you'd like to take, which parameters you'd like to be included in search results, and which parameters you'd like to search on. Press the backtick ` character to execute your search.þ* The results of your search are then displayed with one result on each line.þþ### Functionality not Implementedþ// TODO: what are we missing?",
svetlio-softacad/clinic-softacad,,False,False,False,33484,14856,1,2,0,0,0,0,0,"[2819, 2823, 2824, 2825, 2828, 2829]",User,Simple project ta,"{'': 4, 'prefs': 1, 'iml': 1, 'xml': 666, 'properties': 32, 'txt': 52, 'html': 6847, 'png': 468, 'svg': 281, 'css': 61, 'gif': 11, 'zargo': 9, 'zip': 2, 'jar': 31, 'md': 2, 'gradle': 20, 'java': 6014, 'groovy': 5, 'ent': 3, 'cfg': 2, 'po': 272, 'xml_sample': 1, 'pot': 38, 'xsl': 6, 'template': 1, 'g': 6, 'xsd': 6, 'dtd': 2, 'xjb': 3, 'sql': 5, 'persistenceprovider': 1, 'integrator': 1, 'modulecommandextensions': 1, 'form': 1}",,,Java,21,1,0,0,0,2829,True,0,0,0,0,0,0,0,0,6,0,0,0,,,0,,
